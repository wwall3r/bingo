/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	'/': {
		get: {
			responses: {
				/** OK */
				200: unknown;
			};
		};
	};
	'/boards': {
		get: {
			parameters: {
				query: {
					id?: parameters['rowFilter.boards.id'];
					created_at?: parameters['rowFilter.boards.created_at'];
					updated_at?: parameters['rowFilter.boards.updated_at'];
					user_id?: parameters['rowFilter.boards.user_id'];
					/** Filtering Columns */
					select?: parameters['select'];
					/** Ordering */
					order?: parameters['order'];
					/** Limiting and Pagination */
					offset?: parameters['offset'];
					/** Limiting and Pagination */
					limit?: parameters['limit'];
				};
				header: {
					/** Limiting and Pagination */
					Range?: parameters['range'];
					/** Limiting and Pagination */
					'Range-Unit'?: parameters['rangeUnit'];
					/** Preference */
					Prefer?: parameters['preferCount'];
				};
			};
			responses: {
				/** OK */
				200: {
					schema: definitions['boards'][];
				};
				/** Partial Content */
				206: unknown;
			};
		};
		post: {
			parameters: {
				body: {
					/** boards */
					boards?: definitions['boards'];
				};
				query: {
					/** Filtering Columns */
					select?: parameters['select'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** Created */
				201: unknown;
			};
		};
		delete: {
			parameters: {
				query: {
					id?: parameters['rowFilter.boards.id'];
					created_at?: parameters['rowFilter.boards.created_at'];
					updated_at?: parameters['rowFilter.boards.updated_at'];
					user_id?: parameters['rowFilter.boards.user_id'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
		patch: {
			parameters: {
				query: {
					id?: parameters['rowFilter.boards.id'];
					created_at?: parameters['rowFilter.boards.created_at'];
					updated_at?: parameters['rowFilter.boards.updated_at'];
					user_id?: parameters['rowFilter.boards.user_id'];
				};
				body: {
					/** boards */
					boards?: definitions['boards'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
	};
	'/boards_completions': {
		get: {
			parameters: {
				query: {
					board_id?: parameters['rowFilter.boards_completions.board_id'];
					completion_id?: parameters['rowFilter.boards_completions.completion_id'];
					/** Filtering Columns */
					select?: parameters['select'];
					/** Ordering */
					order?: parameters['order'];
					/** Limiting and Pagination */
					offset?: parameters['offset'];
					/** Limiting and Pagination */
					limit?: parameters['limit'];
				};
				header: {
					/** Limiting and Pagination */
					Range?: parameters['range'];
					/** Limiting and Pagination */
					'Range-Unit'?: parameters['rangeUnit'];
					/** Preference */
					Prefer?: parameters['preferCount'];
				};
			};
			responses: {
				/** OK */
				200: {
					schema: definitions['boards_completions'][];
				};
				/** Partial Content */
				206: unknown;
			};
		};
		post: {
			parameters: {
				body: {
					/** boards_completions */
					boards_completions?: definitions['boards_completions'];
				};
				query: {
					/** Filtering Columns */
					select?: parameters['select'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** Created */
				201: unknown;
			};
		};
		delete: {
			parameters: {
				query: {
					board_id?: parameters['rowFilter.boards_completions.board_id'];
					completion_id?: parameters['rowFilter.boards_completions.completion_id'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
		patch: {
			parameters: {
				query: {
					board_id?: parameters['rowFilter.boards_completions.board_id'];
					completion_id?: parameters['rowFilter.boards_completions.completion_id'];
				};
				body: {
					/** boards_completions */
					boards_completions?: definitions['boards_completions'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
	};
	'/completions': {
		get: {
			parameters: {
				query: {
					id?: parameters['rowFilter.completions.id'];
					created_at?: parameters['rowFilter.completions.created_at'];
					updated_at?: parameters['rowFilter.completions.updated_at'];
					objective_id?: parameters['rowFilter.completions.objective_id'];
					state?: parameters['rowFilter.completions.state'];
					notes?: parameters['rowFilter.completions.notes'];
					/** Filtering Columns */
					select?: parameters['select'];
					/** Ordering */
					order?: parameters['order'];
					/** Limiting and Pagination */
					offset?: parameters['offset'];
					/** Limiting and Pagination */
					limit?: parameters['limit'];
				};
				header: {
					/** Limiting and Pagination */
					Range?: parameters['range'];
					/** Limiting and Pagination */
					'Range-Unit'?: parameters['rangeUnit'];
					/** Preference */
					Prefer?: parameters['preferCount'];
				};
			};
			responses: {
				/** OK */
				200: {
					schema: definitions['completions'][];
				};
				/** Partial Content */
				206: unknown;
			};
		};
		post: {
			parameters: {
				body: {
					/** completions */
					completions?: definitions['completions'];
				};
				query: {
					/** Filtering Columns */
					select?: parameters['select'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** Created */
				201: unknown;
			};
		};
		delete: {
			parameters: {
				query: {
					id?: parameters['rowFilter.completions.id'];
					created_at?: parameters['rowFilter.completions.created_at'];
					updated_at?: parameters['rowFilter.completions.updated_at'];
					objective_id?: parameters['rowFilter.completions.objective_id'];
					state?: parameters['rowFilter.completions.state'];
					notes?: parameters['rowFilter.completions.notes'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
		patch: {
			parameters: {
				query: {
					id?: parameters['rowFilter.completions.id'];
					created_at?: parameters['rowFilter.completions.created_at'];
					updated_at?: parameters['rowFilter.completions.updated_at'];
					objective_id?: parameters['rowFilter.completions.objective_id'];
					state?: parameters['rowFilter.completions.state'];
					notes?: parameters['rowFilter.completions.notes'];
				};
				body: {
					/** completions */
					completions?: definitions['completions'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
	};
	'/games': {
		get: {
			parameters: {
				query: {
					id?: parameters['rowFilter.games.id'];
					label?: parameters['rowFilter.games.label'];
					description?: parameters['rowFilter.games.description'];
					board_size?: parameters['rowFilter.games.board_size'];
					created_at?: parameters['rowFilter.games.created_at'];
					updated_at?: parameters['rowFilter.games.updated_at'];
					expires_at?: parameters['rowFilter.games.expires_at'];
					/** Filtering Columns */
					select?: parameters['select'];
					/** Ordering */
					order?: parameters['order'];
					/** Limiting and Pagination */
					offset?: parameters['offset'];
					/** Limiting and Pagination */
					limit?: parameters['limit'];
				};
				header: {
					/** Limiting and Pagination */
					Range?: parameters['range'];
					/** Limiting and Pagination */
					'Range-Unit'?: parameters['rangeUnit'];
					/** Preference */
					Prefer?: parameters['preferCount'];
				};
			};
			responses: {
				/** OK */
				200: {
					schema: definitions['games'][];
				};
				/** Partial Content */
				206: unknown;
			};
		};
		post: {
			parameters: {
				body: {
					/** games */
					games?: definitions['games'];
				};
				query: {
					/** Filtering Columns */
					select?: parameters['select'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** Created */
				201: unknown;
			};
		};
		delete: {
			parameters: {
				query: {
					id?: parameters['rowFilter.games.id'];
					label?: parameters['rowFilter.games.label'];
					description?: parameters['rowFilter.games.description'];
					board_size?: parameters['rowFilter.games.board_size'];
					created_at?: parameters['rowFilter.games.created_at'];
					updated_at?: parameters['rowFilter.games.updated_at'];
					expires_at?: parameters['rowFilter.games.expires_at'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
		patch: {
			parameters: {
				query: {
					id?: parameters['rowFilter.games.id'];
					label?: parameters['rowFilter.games.label'];
					description?: parameters['rowFilter.games.description'];
					board_size?: parameters['rowFilter.games.board_size'];
					created_at?: parameters['rowFilter.games.created_at'];
					updated_at?: parameters['rowFilter.games.updated_at'];
					expires_at?: parameters['rowFilter.games.expires_at'];
				};
				body: {
					/** games */
					games?: definitions['games'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
	};
	'/games_boards': {
		get: {
			parameters: {
				query: {
					game_id?: parameters['rowFilter.games_boards.game_id'];
					board_id?: parameters['rowFilter.games_boards.board_id'];
					/** Filtering Columns */
					select?: parameters['select'];
					/** Ordering */
					order?: parameters['order'];
					/** Limiting and Pagination */
					offset?: parameters['offset'];
					/** Limiting and Pagination */
					limit?: parameters['limit'];
				};
				header: {
					/** Limiting and Pagination */
					Range?: parameters['range'];
					/** Limiting and Pagination */
					'Range-Unit'?: parameters['rangeUnit'];
					/** Preference */
					Prefer?: parameters['preferCount'];
				};
			};
			responses: {
				/** OK */
				200: {
					schema: definitions['games_boards'][];
				};
				/** Partial Content */
				206: unknown;
			};
		};
		post: {
			parameters: {
				body: {
					/** games_boards */
					games_boards?: definitions['games_boards'];
				};
				query: {
					/** Filtering Columns */
					select?: parameters['select'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** Created */
				201: unknown;
			};
		};
		delete: {
			parameters: {
				query: {
					game_id?: parameters['rowFilter.games_boards.game_id'];
					board_id?: parameters['rowFilter.games_boards.board_id'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
		patch: {
			parameters: {
				query: {
					game_id?: parameters['rowFilter.games_boards.game_id'];
					board_id?: parameters['rowFilter.games_boards.board_id'];
				};
				body: {
					/** games_boards */
					games_boards?: definitions['games_boards'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
	};
	'/games_objectives': {
		get: {
			parameters: {
				query: {
					game_id?: parameters['rowFilter.games_objectives.game_id'];
					objective_id?: parameters['rowFilter.games_objectives.objective_id'];
					/** Filtering Columns */
					select?: parameters['select'];
					/** Ordering */
					order?: parameters['order'];
					/** Limiting and Pagination */
					offset?: parameters['offset'];
					/** Limiting and Pagination */
					limit?: parameters['limit'];
				};
				header: {
					/** Limiting and Pagination */
					Range?: parameters['range'];
					/** Limiting and Pagination */
					'Range-Unit'?: parameters['rangeUnit'];
					/** Preference */
					Prefer?: parameters['preferCount'];
				};
			};
			responses: {
				/** OK */
				200: {
					schema: definitions['games_objectives'][];
				};
				/** Partial Content */
				206: unknown;
			};
		};
		post: {
			parameters: {
				body: {
					/** games_objectives */
					games_objectives?: definitions['games_objectives'];
				};
				query: {
					/** Filtering Columns */
					select?: parameters['select'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** Created */
				201: unknown;
			};
		};
		delete: {
			parameters: {
				query: {
					game_id?: parameters['rowFilter.games_objectives.game_id'];
					objective_id?: parameters['rowFilter.games_objectives.objective_id'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
		patch: {
			parameters: {
				query: {
					game_id?: parameters['rowFilter.games_objectives.game_id'];
					objective_id?: parameters['rowFilter.games_objectives.objective_id'];
				};
				body: {
					/** games_objectives */
					games_objectives?: definitions['games_objectives'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
	};
	'/games_users': {
		get: {
			parameters: {
				query: {
					game_id?: parameters['rowFilter.games_users.game_id'];
					user_id?: parameters['rowFilter.games_users.user_id'];
					/** Filtering Columns */
					select?: parameters['select'];
					/** Ordering */
					order?: parameters['order'];
					/** Limiting and Pagination */
					offset?: parameters['offset'];
					/** Limiting and Pagination */
					limit?: parameters['limit'];
				};
				header: {
					/** Limiting and Pagination */
					Range?: parameters['range'];
					/** Limiting and Pagination */
					'Range-Unit'?: parameters['rangeUnit'];
					/** Preference */
					Prefer?: parameters['preferCount'];
				};
			};
			responses: {
				/** OK */
				200: {
					schema: definitions['games_users'][];
				};
				/** Partial Content */
				206: unknown;
			};
		};
		post: {
			parameters: {
				body: {
					/** games_users */
					games_users?: definitions['games_users'];
				};
				query: {
					/** Filtering Columns */
					select?: parameters['select'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** Created */
				201: unknown;
			};
		};
		delete: {
			parameters: {
				query: {
					game_id?: parameters['rowFilter.games_users.game_id'];
					user_id?: parameters['rowFilter.games_users.user_id'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
		patch: {
			parameters: {
				query: {
					game_id?: parameters['rowFilter.games_users.game_id'];
					user_id?: parameters['rowFilter.games_users.user_id'];
				};
				body: {
					/** games_users */
					games_users?: definitions['games_users'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
	};
	'/objectives': {
		get: {
			parameters: {
				query: {
					id?: parameters['rowFilter.objectives.id'];
					created_at?: parameters['rowFilter.objectives.created_at'];
					updated_at?: parameters['rowFilter.objectives.updated_at'];
					label?: parameters['rowFilter.objectives.label'];
					description?: parameters['rowFilter.objectives.description'];
					/** Filtering Columns */
					select?: parameters['select'];
					/** Ordering */
					order?: parameters['order'];
					/** Limiting and Pagination */
					offset?: parameters['offset'];
					/** Limiting and Pagination */
					limit?: parameters['limit'];
				};
				header: {
					/** Limiting and Pagination */
					Range?: parameters['range'];
					/** Limiting and Pagination */
					'Range-Unit'?: parameters['rangeUnit'];
					/** Preference */
					Prefer?: parameters['preferCount'];
				};
			};
			responses: {
				/** OK */
				200: {
					schema: definitions['objectives'][];
				};
				/** Partial Content */
				206: unknown;
			};
		};
		post: {
			parameters: {
				body: {
					/** objectives */
					objectives?: definitions['objectives'];
				};
				query: {
					/** Filtering Columns */
					select?: parameters['select'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** Created */
				201: unknown;
			};
		};
		delete: {
			parameters: {
				query: {
					id?: parameters['rowFilter.objectives.id'];
					created_at?: parameters['rowFilter.objectives.created_at'];
					updated_at?: parameters['rowFilter.objectives.updated_at'];
					label?: parameters['rowFilter.objectives.label'];
					description?: parameters['rowFilter.objectives.description'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
		patch: {
			parameters: {
				query: {
					id?: parameters['rowFilter.objectives.id'];
					created_at?: parameters['rowFilter.objectives.created_at'];
					updated_at?: parameters['rowFilter.objectives.updated_at'];
					label?: parameters['rowFilter.objectives.label'];
					description?: parameters['rowFilter.objectives.description'];
				};
				body: {
					/** objectives */
					objectives?: definitions['objectives'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
	};
	'/tags': {
		get: {
			parameters: {
				query: {
					id?: parameters['rowFilter.tags.id'];
					label?: parameters['rowFilter.tags.label'];
					created_at?: parameters['rowFilter.tags.created_at'];
					updated_at?: parameters['rowFilter.tags.updated_at'];
					/** Filtering Columns */
					select?: parameters['select'];
					/** Ordering */
					order?: parameters['order'];
					/** Limiting and Pagination */
					offset?: parameters['offset'];
					/** Limiting and Pagination */
					limit?: parameters['limit'];
				};
				header: {
					/** Limiting and Pagination */
					Range?: parameters['range'];
					/** Limiting and Pagination */
					'Range-Unit'?: parameters['rangeUnit'];
					/** Preference */
					Prefer?: parameters['preferCount'];
				};
			};
			responses: {
				/** OK */
				200: {
					schema: definitions['tags'][];
				};
				/** Partial Content */
				206: unknown;
			};
		};
		post: {
			parameters: {
				body: {
					/** tags */
					tags?: definitions['tags'];
				};
				query: {
					/** Filtering Columns */
					select?: parameters['select'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** Created */
				201: unknown;
			};
		};
		delete: {
			parameters: {
				query: {
					id?: parameters['rowFilter.tags.id'];
					label?: parameters['rowFilter.tags.label'];
					created_at?: parameters['rowFilter.tags.created_at'];
					updated_at?: parameters['rowFilter.tags.updated_at'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
		patch: {
			parameters: {
				query: {
					id?: parameters['rowFilter.tags.id'];
					label?: parameters['rowFilter.tags.label'];
					created_at?: parameters['rowFilter.tags.created_at'];
					updated_at?: parameters['rowFilter.tags.updated_at'];
				};
				body: {
					/** tags */
					tags?: definitions['tags'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
	};
	'/tags_objectives': {
		get: {
			parameters: {
				query: {
					tag_id?: parameters['rowFilter.tags_objectives.tag_id'];
					objective_id?: parameters['rowFilter.tags_objectives.objective_id'];
					/** Filtering Columns */
					select?: parameters['select'];
					/** Ordering */
					order?: parameters['order'];
					/** Limiting and Pagination */
					offset?: parameters['offset'];
					/** Limiting and Pagination */
					limit?: parameters['limit'];
				};
				header: {
					/** Limiting and Pagination */
					Range?: parameters['range'];
					/** Limiting and Pagination */
					'Range-Unit'?: parameters['rangeUnit'];
					/** Preference */
					Prefer?: parameters['preferCount'];
				};
			};
			responses: {
				/** OK */
				200: {
					schema: definitions['tags_objectives'][];
				};
				/** Partial Content */
				206: unknown;
			};
		};
		post: {
			parameters: {
				body: {
					/** tags_objectives */
					tags_objectives?: definitions['tags_objectives'];
				};
				query: {
					/** Filtering Columns */
					select?: parameters['select'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** Created */
				201: unknown;
			};
		};
		delete: {
			parameters: {
				query: {
					tag_id?: parameters['rowFilter.tags_objectives.tag_id'];
					objective_id?: parameters['rowFilter.tags_objectives.objective_id'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
		patch: {
			parameters: {
				query: {
					tag_id?: parameters['rowFilter.tags_objectives.tag_id'];
					objective_id?: parameters['rowFilter.tags_objectives.objective_id'];
				};
				body: {
					/** tags_objectives */
					tags_objectives?: definitions['tags_objectives'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
	};
	'/user_profiles': {
		get: {
			parameters: {
				query: {
					id?: parameters['rowFilter.user_profiles.id'];
					user_id?: parameters['rowFilter.user_profiles.user_id'];
					created_at?: parameters['rowFilter.user_profiles.created_at'];
					updated_at?: parameters['rowFilter.user_profiles.updated_at'];
					display_name?: parameters['rowFilter.user_profiles.display_name'];
					/** Filtering Columns */
					select?: parameters['select'];
					/** Ordering */
					order?: parameters['order'];
					/** Limiting and Pagination */
					offset?: parameters['offset'];
					/** Limiting and Pagination */
					limit?: parameters['limit'];
				};
				header: {
					/** Limiting and Pagination */
					Range?: parameters['range'];
					/** Limiting and Pagination */
					'Range-Unit'?: parameters['rangeUnit'];
					/** Preference */
					Prefer?: parameters['preferCount'];
				};
			};
			responses: {
				/** OK */
				200: {
					schema: definitions['user_profiles'][];
				};
				/** Partial Content */
				206: unknown;
			};
		};
		post: {
			parameters: {
				body: {
					/** user_profiles */
					user_profiles?: definitions['user_profiles'];
				};
				query: {
					/** Filtering Columns */
					select?: parameters['select'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** Created */
				201: unknown;
			};
		};
		delete: {
			parameters: {
				query: {
					id?: parameters['rowFilter.user_profiles.id'];
					user_id?: parameters['rowFilter.user_profiles.user_id'];
					created_at?: parameters['rowFilter.user_profiles.created_at'];
					updated_at?: parameters['rowFilter.user_profiles.updated_at'];
					display_name?: parameters['rowFilter.user_profiles.display_name'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
		patch: {
			parameters: {
				query: {
					id?: parameters['rowFilter.user_profiles.id'];
					user_id?: parameters['rowFilter.user_profiles.user_id'];
					created_at?: parameters['rowFilter.user_profiles.created_at'];
					updated_at?: parameters['rowFilter.user_profiles.updated_at'];
					display_name?: parameters['rowFilter.user_profiles.display_name'];
				};
				body: {
					/** user_profiles */
					user_profiles?: definitions['user_profiles'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
	};
	'/users': {
		get: {
			parameters: {
				query: {
					id?: parameters['rowFilter.users.id'];
					email?: parameters['rowFilter.users.email'];
					/** Filtering Columns */
					select?: parameters['select'];
					/** Ordering */
					order?: parameters['order'];
					/** Limiting and Pagination */
					offset?: parameters['offset'];
					/** Limiting and Pagination */
					limit?: parameters['limit'];
				};
				header: {
					/** Limiting and Pagination */
					Range?: parameters['range'];
					/** Limiting and Pagination */
					'Range-Unit'?: parameters['rangeUnit'];
					/** Preference */
					Prefer?: parameters['preferCount'];
				};
			};
			responses: {
				/** OK */
				200: {
					schema: definitions['users'][];
				};
				/** Partial Content */
				206: unknown;
			};
		};
		post: {
			parameters: {
				body: {
					/** users */
					users?: definitions['users'];
				};
				query: {
					/** Filtering Columns */
					select?: parameters['select'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** Created */
				201: unknown;
			};
		};
		delete: {
			parameters: {
				query: {
					id?: parameters['rowFilter.users.id'];
					email?: parameters['rowFilter.users.email'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
		patch: {
			parameters: {
				query: {
					id?: parameters['rowFilter.users.id'];
					email?: parameters['rowFilter.users.email'];
				};
				body: {
					/** users */
					users?: definitions['users'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
	};
	'/rpc/is_member_of': {
		post: {
			parameters: {
				body: {
					args: {
						/** Format: uuid */
						_user_id: string;
						/** Format: uuid */
						_game_id: string;
					};
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferParams'];
				};
			};
			responses: {
				/** OK */
				200: unknown;
			};
		};
	};
}

export interface definitions {
	/** @description An instance of a game */
	boards: {
		/**
		 * Format: uuid
		 * @description Note:
		 * This is a Primary Key.<pk/>
		 * @default extensions.uuid_generate_v4()
		 */
		id: string;
		/**
		 * Format: timestamp with time zone
		 * @default now()
		 */
		created_at: string;
		/**
		 * Format: timestamp with time zone
		 * @default now()
		 */
		updated_at: string;
		/**
		 * Format: uuid
		 * @description Note:
		 * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
		 */
		user_id: string;
	};
	/** @description The association of boards to completions */
	boards_completions: {
		/**
		 * Format: uuid
		 * @description Note:
		 * This is a Primary Key.<pk/>
		 * This is a Foreign Key to `boards.id`.<fk table='boards' column='id'/>
		 */
		board_id: string;
		/**
		 * Format: uuid
		 * @description Note:
		 * This is a Primary Key.<pk/>
		 * This is a Foreign Key to `completions.id`.<fk table='completions' column='id'/>
		 */
		completion_id: string;
	};
	/** @description The state of the objectives for a board */
	completions: {
		/**
		 * Format: uuid
		 * @description Note:
		 * This is a Primary Key.<pk/>
		 * @default extensions.uuid_generate_v4()
		 */
		id: string;
		/**
		 * Format: timestamp with time zone
		 * @default now()
		 */
		created_at: string;
		/**
		 * Format: timestamp with time zone
		 * @default now()
		 */
		updated_at: string;
		/**
		 * Format: uuid
		 * @description Note:
		 * This is a Foreign Key to `objectives.id`.<fk table='objectives' column='id'/>
		 */
		objective_id: string;
		/**
		 * Format: character varying
		 * @default incomplete
		 */
		state: string;
		/** Format: text */
		notes?: string;
	};
	/** @description The game instances */
	games: {
		/**
		 * Format: uuid
		 * @description Note:
		 * This is a Primary Key.<pk/>
		 * @default extensions.uuid_generate_v4()
		 */
		id: string;
		/** Format: character varying */
		label: string;
		/** Format: text */
		description?: string;
		/** Format: smallint */
		board_size: number;
		/**
		 * Format: timestamp with time zone
		 * @default now()
		 */
		created_at?: string;
		/**
		 * Format: timestamp with time zone
		 * @default now()
		 */
		updated_at?: string;
		/**
		 * Format: timestamp with time zone
		 * @default (now() + '90 days'::interval)
		 */
		expires_at?: string;
	};
	/** @description One game can have multiple board instances */
	games_boards: {
		/**
		 * Format: uuid
		 * @description Note:
		 * This is a Primary Key.<pk/>
		 * This is a Foreign Key to `games.id`.<fk table='games' column='id'/>
		 */
		game_id: string;
		/**
		 * Format: uuid
		 * @description Note:
		 * This is a Primary Key.<pk/>
		 * This is a Foreign Key to `boards.id`.<fk table='boards' column='id'/>
		 */
		board_id: string;
	};
	/** @description Associates games to objectives */
	games_objectives: {
		/**
		 * Format: uuid
		 * @description Note:
		 * This is a Primary Key.<pk/>
		 * This is a Foreign Key to `games.id`.<fk table='games' column='id'/>
		 */
		game_id: string;
		/**
		 * Format: uuid
		 * @description Note:
		 * This is a Primary Key.<pk/>
		 * This is a Foreign Key to `objectives.id`.<fk table='objectives' column='id'/>
		 */
		objective_id: string;
	};
	/** @description The audience of game. Those that are able to create or view boards. */
	games_users: {
		/**
		 * Format: uuid
		 * @description Note:
		 * This is a Primary Key.<pk/>
		 * This is a Foreign Key to `games.id`.<fk table='games' column='id'/>
		 */
		game_id: string;
		/**
		 * Format: uuid
		 * @description Note:
		 * This is a Primary Key.<pk/>
		 * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
		 */
		user_id: string;
	};
	/** @description A single item to be used on a board */
	objectives: {
		/**
		 * Format: uuid
		 * @description Note:
		 * This is a Primary Key.<pk/>
		 * @default extensions.uuid_generate_v4()
		 */
		id: string;
		/**
		 * Format: timestamp with time zone
		 * @default now()
		 */
		created_at?: string;
		/**
		 * Format: timestamp with time zone
		 * @default now()
		 */
		updated_at: string;
		/** Format: character varying */
		label: string;
		/** Format: text */
		description?: string;
	};
	/** @description Provides a means for categorizing Objectives */
	tags: {
		/**
		 * Format: uuid
		 * @description Note:
		 * This is a Primary Key.<pk/>
		 * @default extensions.uuid_generate_v4()
		 */
		id: string;
		/** Format: character varying */
		label: string;
		/**
		 * Format: timestamp with time zone
		 * @default now()
		 */
		created_at?: string;
		/**
		 * Format: timestamp with time zone
		 * @default now()
		 */
		updated_at?: string;
	};
	/** @description Associates a tag to an objective */
	tags_objectives: {
		/**
		 * Format: uuid
		 * @description Note:
		 * This is a Primary Key.<pk/>
		 * This is a Foreign Key to `tags.id`.<fk table='tags' column='id'/>
		 */
		tag_id: string;
		/**
		 * Format: uuid
		 * @description Note:
		 * This is a Primary Key.<pk/>
		 * This is a Foreign Key to `objectives.id`.<fk table='objectives' column='id'/>
		 */
		objective_id: string;
	};
	/** @description A user's public data */
	user_profiles: {
		/**
		 * Format: uuid
		 * @description Note:
		 * This is a Primary Key.<pk/>
		 * @default extensions.uuid_generate_v4()
		 */
		id: string;
		/**
		 * Format: uuid
		 * @description Note:
		 * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
		 */
		user_id: string;
		/**
		 * Format: timestamp with time zone
		 * @default now()
		 */
		created_at: string;
		/**
		 * Format: timestamp with time zone
		 * @default now()
		 */
		updated_at: string;
		/** Format: character varying */
		display_name?: string;
	};
	users: {
		/**
		 * Format: uuid
		 * @description Note:
		 * This is a Primary Key.<pk/>
		 */
		id?: string;
		/** Format: character varying */
		email?: string;
	};
}

export interface parameters {
	/**
	 * @description Preference
	 * @enum {string}
	 */
	preferParams: 'params=single-object';
	/**
	 * @description Preference
	 * @enum {string}
	 */
	preferReturn: 'return=representation' | 'return=minimal' | 'return=none';
	/**
	 * @description Preference
	 * @enum {string}
	 */
	preferCount: 'count=none';
	/** @description Filtering Columns */
	select: string;
	/** @description On Conflict */
	on_conflict: string;
	/** @description Ordering */
	order: string;
	/** @description Limiting and Pagination */
	range: string;
	/**
	 * @description Limiting and Pagination
	 * @default items
	 */
	rangeUnit: string;
	/** @description Limiting and Pagination */
	offset: string;
	/** @description Limiting and Pagination */
	limit: string;
	/** @description boards */
	'body.boards': definitions['boards'];
	/** Format: uuid */
	'rowFilter.boards.id': string;
	/** Format: timestamp with time zone */
	'rowFilter.boards.created_at': string;
	/** Format: timestamp with time zone */
	'rowFilter.boards.updated_at': string;
	/** Format: uuid */
	'rowFilter.boards.user_id': string;
	/** @description boards_completions */
	'body.boards_completions': definitions['boards_completions'];
	/** Format: uuid */
	'rowFilter.boards_completions.board_id': string;
	/** Format: uuid */
	'rowFilter.boards_completions.completion_id': string;
	/** @description completions */
	'body.completions': definitions['completions'];
	/** Format: uuid */
	'rowFilter.completions.id': string;
	/** Format: timestamp with time zone */
	'rowFilter.completions.created_at': string;
	/** Format: timestamp with time zone */
	'rowFilter.completions.updated_at': string;
	/** Format: uuid */
	'rowFilter.completions.objective_id': string;
	/** Format: character varying */
	'rowFilter.completions.state': string;
	/** Format: text */
	'rowFilter.completions.notes': string;
	/** @description games */
	'body.games': definitions['games'];
	/** Format: uuid */
	'rowFilter.games.id': string;
	/** Format: character varying */
	'rowFilter.games.label': string;
	/** Format: text */
	'rowFilter.games.description': string;
	/** Format: smallint */
	'rowFilter.games.board_size': string;
	/** Format: timestamp with time zone */
	'rowFilter.games.created_at': string;
	/** Format: timestamp with time zone */
	'rowFilter.games.updated_at': string;
	/** Format: timestamp with time zone */
	'rowFilter.games.expires_at': string;
	/** @description games_boards */
	'body.games_boards': definitions['games_boards'];
	/** Format: uuid */
	'rowFilter.games_boards.game_id': string;
	/** Format: uuid */
	'rowFilter.games_boards.board_id': string;
	/** @description games_objectives */
	'body.games_objectives': definitions['games_objectives'];
	/** Format: uuid */
	'rowFilter.games_objectives.game_id': string;
	/** Format: uuid */
	'rowFilter.games_objectives.objective_id': string;
	/** @description games_users */
	'body.games_users': definitions['games_users'];
	/** Format: uuid */
	'rowFilter.games_users.game_id': string;
	/** Format: uuid */
	'rowFilter.games_users.user_id': string;
	/** @description objectives */
	'body.objectives': definitions['objectives'];
	/** Format: uuid */
	'rowFilter.objectives.id': string;
	/** Format: timestamp with time zone */
	'rowFilter.objectives.created_at': string;
	/** Format: timestamp with time zone */
	'rowFilter.objectives.updated_at': string;
	/** Format: character varying */
	'rowFilter.objectives.label': string;
	/** Format: text */
	'rowFilter.objectives.description': string;
	/** @description tags */
	'body.tags': definitions['tags'];
	/** Format: uuid */
	'rowFilter.tags.id': string;
	/** Format: character varying */
	'rowFilter.tags.label': string;
	/** Format: timestamp with time zone */
	'rowFilter.tags.created_at': string;
	/** Format: timestamp with time zone */
	'rowFilter.tags.updated_at': string;
	/** @description tags_objectives */
	'body.tags_objectives': definitions['tags_objectives'];
	/** Format: uuid */
	'rowFilter.tags_objectives.tag_id': string;
	/** Format: uuid */
	'rowFilter.tags_objectives.objective_id': string;
	/** @description user_profiles */
	'body.user_profiles': definitions['user_profiles'];
	/** Format: uuid */
	'rowFilter.user_profiles.id': string;
	/** Format: uuid */
	'rowFilter.user_profiles.user_id': string;
	/** Format: timestamp with time zone */
	'rowFilter.user_profiles.created_at': string;
	/** Format: timestamp with time zone */
	'rowFilter.user_profiles.updated_at': string;
	/** Format: character varying */
	'rowFilter.user_profiles.display_name': string;
	/** @description users */
	'body.users': definitions['users'];
	/** Format: uuid */
	'rowFilter.users.id': string;
	/** Format: character varying */
	'rowFilter.users.email': string;
}

export interface operations {}

export interface external {}
