-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.

DROP TABLE IF EXISTS public.games_objectives_assoc CASCADE;

DROP TABLE IF EXISTS public.tags_objectives_assoc CASCADE;

CREATE TABLE IF NOT EXISTS public.boards
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    user_id uuid NOT NULL,
    CONSTRAINT board_pkey PRIMARY KEY (id),
    CONSTRAINT board_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES auth.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.boards
    OWNER to postgres;

ALTER TABLE IF EXISTS public.boards
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.boards TO anon;

GRANT ALL ON TABLE public.boards TO authenticated;

GRANT ALL ON TABLE public.boards TO postgres;

GRANT ALL ON TABLE public.boards TO service_role;

COMMENT ON TABLE public.boards
    IS 'An instance of a game';
CREATE POLICY "Enable ALL for users based on user_id"
    ON public.boards
    AS PERMISSIVE
    FOR ALL
    TO public
    USING ((auth.uid() = user_id))
    WITH CHECK ((auth.uid() = user_id));


CREATE TABLE IF NOT EXISTS public.games_objectives
(
    game_id uuid NOT NULL,
    objective_id uuid NOT NULL,
    CONSTRAINT game_objective_assoc_pkey PRIMARY KEY (game_id, objective_id),
    CONSTRAINT game_objective_assoc_game_id_fkey FOREIGN KEY (game_id)
        REFERENCES public.games (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT game_objective_assoc_objective_id_fkey FOREIGN KEY (objective_id)
        REFERENCES public.objectives (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.games_objectives
    OWNER to postgres;

GRANT ALL ON TABLE public.games_objectives TO anon;

GRANT ALL ON TABLE public.games_objectives TO authenticated;

GRANT ALL ON TABLE public.games_objectives TO postgres;

GRANT ALL ON TABLE public.games_objectives TO service_role;

COMMENT ON TABLE public.games_objectives
    IS 'Associates games to objectives';

CREATE TABLE IF NOT EXISTS public.completions
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    objective_id uuid NOT NULL,
    state character varying COLLATE pg_catalog."default" NOT NULL DEFAULT '''incomplete'''::character varying,
    notes text COLLATE pg_catalog."default",
    CONSTRAINT completions_pkey PRIMARY KEY (id),
    CONSTRAINT completions_objective_id_fkey FOREIGN KEY (objective_id)
        REFERENCES public.objectives (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.completions
    OWNER to postgres;

ALTER TABLE IF EXISTS public.completions
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.completions TO anon;

GRANT ALL ON TABLE public.completions TO authenticated;

GRANT ALL ON TABLE public.completions TO postgres;

GRANT ALL ON TABLE public.completions TO service_role;

COMMENT ON TABLE public.completions
    IS 'The state of the objectives for a board';


CREATE TABLE IF NOT EXISTS public.boards_completions
(
    board_id uuid NOT NULL,
    completion_id uuid NOT NULL,
    CONSTRAINT boards_completions_pkey PRIMARY KEY (board_id, completion_id),
    CONSTRAINT boards_completions_board_id_fkey FOREIGN KEY (board_id)
        REFERENCES public.boards (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT boards_completions_completion_id_fkey FOREIGN KEY (completion_id)
        REFERENCES public.completions (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.boards_completions
    OWNER to postgres;

GRANT ALL ON TABLE public.boards_completions TO anon;

GRANT ALL ON TABLE public.boards_completions TO authenticated;

GRANT ALL ON TABLE public.boards_completions TO postgres;

GRANT ALL ON TABLE public.boards_completions TO service_role;

COMMENT ON TABLE public.boards_completions
    IS 'The association of boards to completions';


CREATE POLICY "completions - owners can execute ALL "
    ON public.completions
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING ((EXISTS ( SELECT 1
   FROM completions c,
    boards b,
    boards_completions bc
  WHERE ((c.id = bc.completion_id) AND (b.id = bc.board_id) AND (auth.uid() = b.user_id)))));

CREATE TABLE IF NOT EXISTS public.tags_objectives
(
    tag_id uuid NOT NULL,
    objective_id uuid NOT NULL,
    CONSTRAINT tags_objectives_assoc_pkey PRIMARY KEY (tag_id, objective_id),
    CONSTRAINT tags_objectives_assoc_objective_id_fkey FOREIGN KEY (objective_id)
        REFERENCES public.objectives (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT tags_objectives_assoc_tag_id_fkey FOREIGN KEY (tag_id)
        REFERENCES public.tags (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.tags_objectives
    OWNER to postgres;

ALTER TABLE IF EXISTS public.tags_objectives
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.tags_objectives TO anon;

GRANT ALL ON TABLE public.tags_objectives TO authenticated;

GRANT ALL ON TABLE public.tags_objectives TO postgres;

GRANT ALL ON TABLE public.tags_objectives TO service_role;

COMMENT ON TABLE public.tags_objectives
    IS 'Associates a tag to an objective';


