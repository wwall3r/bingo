-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.

CREATE OR REPLACE FUNCTION public.is_member_of(
	_user_id uuid,
	_game_id uuid)
    RETURNS boolean
    LANGUAGE 'sql'
    COST 100
    VOLATILE SECURITY DEFINER PARALLEL UNSAFE
AS $BODY$
SELECT EXISTS (
  SELECT 1
  FROM games_users gu
  WHERE gu.game_id = _game_id
  AND gu.user_id = _user_id
);
$BODY$;

ALTER FUNCTION public.is_member_of(uuid, uuid)
    OWNER TO postgres;

GRANT EXECUTE ON FUNCTION public.is_member_of(uuid, uuid) TO PUBLIC;

GRANT EXECUTE ON FUNCTION public.is_member_of(uuid, uuid) TO authenticated;

GRANT EXECUTE ON FUNCTION public.is_member_of(uuid, uuid) TO postgres;

GRANT EXECUTE ON FUNCTION public.is_member_of(uuid, uuid) TO service_role;

ALTER TABLE IF EXISTS public.games_users
    ENABLE ROW LEVEL SECURITY;

CREATE POLICY "game members can read"
    ON public.games_users
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (is_member_of(auth.uid(), game_id));

CREATE POLICY "game members can read"
    ON public.games
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (is_member_of(auth.uid(), id));

DROP POLICY IF EXISTS "games - authenticated users can read" ON public.games;

ALTER TABLE IF EXISTS public.games_boards
    ENABLE ROW LEVEL SECURITY;

CREATE POLICY "game members can read"
    ON public.games_boards
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (is_member_of(auth.uid(), game_id));

ALTER TABLE IF EXISTS public.games_objectives
    ENABLE ROW LEVEL SECURITY;

CREATE POLICY "game members can read"
    ON public.games_objectives
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (is_member_of(auth.uid(), game_id));

