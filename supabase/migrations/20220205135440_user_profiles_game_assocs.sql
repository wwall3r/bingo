-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.

CREATE TABLE IF NOT EXISTS public.user_profiles
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    user_id uuid NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    display_name character varying COLLATE pg_catalog."default",
    CONSTRAINT user_profile_pkey PRIMARY KEY (id),
    CONSTRAINT user_profile_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES auth.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.user_profiles
    OWNER to postgres;

ALTER TABLE IF EXISTS public.user_profiles
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.user_profiles TO anon;

GRANT ALL ON TABLE public.user_profiles TO authenticated;

GRANT ALL ON TABLE public.user_profiles TO postgres;

GRANT ALL ON TABLE public.user_profiles TO service_role;

COMMENT ON TABLE public.user_profiles
    IS 'A user''s public data';
CREATE POLICY "Enable all actions for users based on user_id"
    ON public.user_profiles
    AS PERMISSIVE
    FOR ALL
    TO public
    USING ((auth.uid() = user_id))
    WITH CHECK ((auth.uid() = user_id));
CREATE POLICY "Enable insert for authenticated users only"
    ON public.user_profiles
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING ((auth.role() = 'authenticated'::text));

CREATE TABLE IF NOT EXISTS public.games_boards
(
    game_id uuid NOT NULL,
    board_id uuid NOT NULL,
    CONSTRAINT games_boards_pkey PRIMARY KEY (game_id, board_id),
    CONSTRAINT games_boards_board_id_fkey FOREIGN KEY (board_id)
        REFERENCES public.boards (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT games_boards_game_id_fkey FOREIGN KEY (game_id)
        REFERENCES public.games (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.games_boards
    OWNER to postgres;

GRANT ALL ON TABLE public.games_boards TO anon;

GRANT ALL ON TABLE public.games_boards TO authenticated;

GRANT ALL ON TABLE public.games_boards TO postgres;

GRANT ALL ON TABLE public.games_boards TO service_role;

COMMENT ON TABLE public.games_boards
    IS 'One game can have multiple board instances';

CREATE TABLE IF NOT EXISTS public.games_users
(
    game_id uuid NOT NULL,
    user_id uuid NOT NULL,
    CONSTRAINT games_users_pkey PRIMARY KEY (game_id, user_id),
    CONSTRAINT games_users_game_id_fkey FOREIGN KEY (game_id)
        REFERENCES public.games (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT games_users_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES auth.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.games_users
    OWNER to postgres;

GRANT ALL ON TABLE public.games_users TO anon;

GRANT ALL ON TABLE public.games_users TO authenticated;

GRANT ALL ON TABLE public.games_users TO postgres;

GRANT ALL ON TABLE public.games_users TO service_role;

COMMENT ON TABLE public.games_users
    IS 'The audience of game. Those that are able to create or view boards. ';

ALTER TABLE IF EXISTS public.games
    ADD COLUMN expires_at timestamp with time zone DEFAULT (now() + '90 days'::interval);
