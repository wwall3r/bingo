-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.

create extension if not exists moddatetime schema extensions;


CREATE TABLE IF NOT EXISTS public.objectives
(
    id uuid NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    label character varying COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    CONSTRAINT objectives_pkey PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.objectives
    OWNER to postgres;

ALTER TABLE IF EXISTS public.objectives
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.objectives TO anon;

GRANT ALL ON TABLE public.objectives TO authenticated;

GRANT ALL ON TABLE public.objectives TO postgres;

GRANT ALL ON TABLE public.objectives TO service_role;

COMMENT ON TABLE public.objectives
    IS 'A single item to be used on a board';
CREATE POLICY "objectives - authenticated users can read"
    ON public.objectives
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING ((auth.role() = 'authenticated'::text));

CREATE TRIGGER handle_updated_at
    BEFORE UPDATE 
    ON public.objectives
    FOR EACH ROW
    EXECUTE FUNCTION extensions.moddatetime('updated_at');
